

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.


(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))


(package-initialize)





(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(add-to-list 'load-path "~/.emacs.d/expand-region.el")

(add-to-list 'load-path "~/.emacs.d/other-lisp")
(add-to-list 'load-path "~/.emacs.d/vendor")
(add-to-list 'load-path "~/.emacs.d/vendor/google-translate")
(add-to-list 'load-path "~/.emacs.d/vendor/google-translate-mode")






;; add the leuven theme
(add-to-list 'custom-theme-load-path " ~/.emacs.d/vendor/emacs-leuven-theme")
(load-theme 'leuven t)
(setq leuven-scale-outline-headlines nil)
;(set-face-attribute 'org-agenda-date nil :height 90) ; 9 pt font.
;; Fontify the whole line for headings (with a background color).
(setq org-fontify-whole-heading-line t)

;(unless (require 'el-get nil 'noerror)
;  (with-current-buffer
;      (url-retrieve-synchronously
;       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
;    (let (el-get-master-branch)
;      (goto-char (point-max))
;      (eval-print-last-sexp))))

;(el-get 'sync)



(setq org-src-fontify-natively t)

(setq org-startup-with-inline-images t)
;; backup;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq backup-directory-alist `(("." . "~/.emacs_saves")))


;(setq make-backup-files nil) 

;; UTF-8 as default encoding
(set-language-environment "UTF-8")

;(prefer-coding-system 'utf-8)


;(add-to-list 'load-path "~/.emacs.d/Enhanced-Ruby-Mode") ; must be added after any path containing old ruby-mode
;(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
;(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
;(add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))

; (eval-after-load 'enh-ruby-mode
;                     '(define-key enh-ruby-mode-map (kbd "C-c n") 'enh-ruby-end-of-block))
; (eval-after-load 'enh-ruby-mode
;                     '(define-key enh-ruby-mode-map (kbd "C-c p") 'enh-ruby-beginning-of-block))



;(add-to-list 'load-path "~/.emacs.d/inf-ruby") ; 
;(autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
;(add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)

;;;--------magit-----------
;(add-to-list 'load-path "~/.emacs.d/vendor/git-modes-0.15.0")

;(eval-after-load 'info
;  '(progn (info-initialize)
;          (add-to-list 'Info-directory-list "~/.emacs.d/vendor/magit")))
;(require 'magit)

;(global-set-key (kbd "C-c g") 'magit-status)


;; ------------------- jedi -----------------------------------------------------
;(setq jedi:setup-keys t)
;(add-hook 'python-mode-hook 'jedi:setup)

;;----------------- python.el -----------------------------------------------------
;(add-to-list 'load-path "~/.emacs.d/python.el") 
;(require 'python)

;;;;----------yas snippet------------------------------------------------------
;(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet") 
;(require 'yasnippet)

;(setq yas-snippet-dirs
;      '("~/.emacs.d/snippets"            ;; personal snippets
;        "~/.emacs.d/plugins/yasnippet/snippets"    ;; the default collection
;        ))

;(yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
;;;;;;--------- setup  pylookup  ------------------------------------- 

;; add pylookup to your loadpath, ex) ~/.emacs.d/pylookup
;(setq pylookup-dir "~/pylookup")
;(add-to-list 'load-path pylookup-dir)

;; load pylookup when compile time
;(eval-when-compile (require 'pylookup))

;; set executable file and db file
;(setq pylookup-program (concat pylookup-dir "/pylookup.py"))
;(setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))

;; set search option if you want
;; (setq pylookup-search-options '("--insensitive" "0" "--desc" "0"))

;; to speedup, just load it on demand
;(autoload 'pylookup-lookup "pylookup"
;  "Lookup SEARCH-TERM in the Python HTML indexes." t)

;(autoload 'pylookup-update "pylookup" 
;  "Run pylookup-update and create the database at `pylookup-db-file'." t)


;(global-set-key "\C-ch" 'pylookup-lookup)
;;;;;;--------- setup  pylookup  end --------------------- ;;;;;;

;;;;;;----------settup org2blog --------------------------------
(setq org2blog/wp-blog-alist
       '(("wordpress"
          :url "http://cxmyes.wordpress.com/xmlrpc.php"
          :username "cxmtime"
          :default-title "Hello World"
          :default-categories ("org2blog" "emacs")
          :tags-as-categories nil)
         ("my-blog"
          :url "http://username.server.com/xmlrpc.php"
          :username "admin")))

;;;;;;;;;-----------------------------------------------------------


;(setq org-agenda-files '("~/org"))


;;;;;;;; take a screenshot to org --------------------------------------------------------------------------
 (defun org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq tilde-buffer-filename
	(replace-regexp-in-string "/" "\\" (buffer-file-name) t t))
  (setq filename
	(concat
	 (make-temp-name
	  (concat "d:\\emacs\\images\\"
		  "_"
		  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  ;; Linux: ImageMagick: (call-process "import" nil nil nil filename)
  ;; Windows: Irfanview
  (call-process "d:\\P\\IrfanView\\i_view32.exe" nil nil nil (concat "/clippaste /convert=" filename))
  (insert (concat "[[file:" filename "]]"))
  (org-display-inline-images))
  ; open jpg files in external app
  (add-hook 'org-mode-hook
      '(lambda ()
             (setq org-file-apps
                   (append '(
                             ("\\.png\\'" . default)
                             ) org-file-apps ))))



(global-set-key (kbd "C-c y") 'org-screenshot)
;;;;;;;;-----------------------------------------------------------------------------------------------------


;;
;; My Function for Screenshots
;; http://www.sastibe.de/2018/11/take-screenshots-straight-into-org-files-in-emacs-on-win10/

(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)

  (setq filename_inline
        (concat "./media/"
         (make-temp-name
          (concat (buffer-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))


  (setq filename
       (concat default-directory filename_inline))




  (setq filename_win
  (substring 
    (shell-command-to-string (concat "cygpath -w " filename) ) 
   0 -1))
  
   ;(shell-command "snippingtool /clip")

   (setq save_cmd
	(format "powershell -command '$img = get-clipboard -format image; $img.save(\"%s\")'" filename_win)
   )

  (shell-command save_cmd)
  (insert (concat "[[file:" filename_inline"]]"))
  (org-display-inline-images))

(global-set-key "\C-cs" 'my-org-screenshot)




;;;;;;;;------------ org setting ----------------------------------------------------------------------------

;(setq org-capture-templates
;      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
;            "* TODO %?\n  %i\n  %a")
;        ("j" "Journal" entry (file+datetree "~/org/journal.org")
;             "* %?\nEntered on %U\n  %i\n  %a")))



(setq org-capture-templates
'(

("w" "work notes" entry (file "~/org/work-notes.org")
  "* \n Entered on %T\n"  :prepend t)
("l" "life notes" entry (file "~/org/life-notes.org")
  "* \n Entered on %T\n" :prepend t)
("t" "Todo of work" entry (file+headline "~/org/todo.org" "Tasks")
  "* TODO %?\n Entered on %T\n" :prepend t)
("T" "Todo of life" entry (file+headline "~/org/gtdlife.org" "Tasks")
  "* TODO %?\n Entered on %T\n" :prepend t)
("o" "Operation log" entry (file+datetree+prompt "~/org/oplog.org") 
 "* %?\n----Entered on %U\n  %i\n")
("L" "Life log" entry (file "~/org/lifelog.org")
"* %^g\n Entered on %T\n" :prepend t)
("m" "meeting" entry (file "~/org/meeting.org")
"* \n Entered on %T\n" :prepend t)
))

(global-set-key (kbd "<C-f12>") 'org-capture)
(global-set-key [f8] 'org-todo-list)

;(global-set-key (kbd "<C-f8>") 'org-todo-list)

(setq org-default-notes-filed "~/org/defaultnote.org" )



;;;;;;org 自动缩进--------
(add-hook 'org-mode-hook
       (lambda ()
       (org-indent-mode t))
              t)
;;-------------------------

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(add-to-list 'auto-mode-alist '("\\.notes$" . org-mode))

;;;;;;;-------------------------------------------------------------------------------------------------------

(require 'deft)
(setq deft-directory "~/org")
(setq deft-extensions '("org" "md"))
(setq deft-text-mode 'org-mode)
(setq deft-use-filename-as-title t)
(global-set-key [f12] 'deft)
(global-set-key (kbd "C-x C-g") 'deft-find-file)

;;;;;;;-----;copy-region if region selected; else copy-line-----------------------------------------------

(defun copy-line-or-region (beg end) 
 "copy region if active only or copy line normally"
  (interactive "r")
  (if (region-active-p)
      (call-interactively 'kill-ring-save)
    (call-interactively 'copy-line)))

(global-set-key (kbd "M-w") 'copy-line-or-region)
;;;;;;----------------------------------------------------------------------------------------------------------
;;;;;;;;;;;---- kill-other-buffers  ------------
(defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))


;;;-----------------------------------------------------------------
;;;;;;;;;;;;;;;;;;;;kill-region if region selected; else kill-backwad---------------------------
(defun kill-backward-or-region (beg end) 
 "kill region if active only or kill line normally"
  (interactive "r")
  (if (region-active-p)
      (call-interactively 'kill-region)
    (call-interactively 'backward-kill-word)))

(global-set-key (kbd "C-w") 'kill-backward-or-region)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.page\\'" . markdown-mode))


;;;;;;;;;;;;;;;coy-line and copy word ------------------------------------------------------------
(defun copy-line (&optional arg)
 "Save current line into Kill-Ring without mark the line"
 (interactive "P")
 (let ((beg (line-beginning-position)) 
	(end (line-end-position arg)))
 (copy-region-as-kill beg end))
)


(defun copy-word (&optional arg)
 "Copy words at point"
 (interactive "P")
 (let ((beg (progn (if (looking-back "[a-zA-Z0-9]" 1) (backward-word 1)) (point))) 
	(end (progn (forward-word arg) (point))))
 (copy-region-as-kill beg end))
)
;;;;;;;;--------------------------------------------------------------------------------------------

(defun copy-rectangle-to-clipboard (p1 p2)
  "Copy region as column (rectangle) to operating system's clipboard.
This command will also put the text in register 0. (see: `copy-to-register')"
  (interactive "r")
  (let ((x-select-enable-clipboard t))
    (copy-rectangle-to-register ?0 p1 p2)
    (kill-new
     (with-temp-buffer
       (insert-register ?0)
       (buffer-string) )) ) )

(global-set-key "\C-xrc" 'copy-rectangle-to-clipboard)


;;;;

(global-set-key (kbd "<f5>") 'call-last-kbd-macro)

;;;;;;;;;;;-----------------ido---------------------------------------------------------------
;(setq ido-enable-flex-matching t)
;  (setq ido-everywhere t)
(ido-mode 1)
;;;;;;;;;;------------------------------------------------------------------------------------
;;;;;;;;; setup utf-8 ------------------------------------------------------------------------
(set-language-environment 'utf-8)
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; This from a japanese individual.  I hope it works.
(setq default-buffer-file-coding-system 'utf-8)
;; From Emacs wiki
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; MS Windows clipboard is UTF-16LE 
;(set-clipboard-coding-system 'utf-16le-dos)

;;;;;;;;;;; Settup English Font and Chinese Font ---------------------------------------------
;; Setting English Font
;(set-face-attribute
;  'default nil :font "Consolas 10")
   
 ;; Chinese Font
; (dolist (charset '(kana han symbol cjk-misc bopomofo))
;        (set-fontset-font (frame-parameter nil 'font)
;                             charset
 ;                            (font-spec :family "Microsoft Yahei" :size 13)))
;;set font family
;

;;;-------------ibuffer mode ---------------------------------------


(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer-other-window)

(setq ibuffer-default-sorting-mode 'major-mode)


;;;-------------------Kill buffer with prompted--------------------------

(global-set-key (kbd "C-x k") 
        '(lambda () (interactive) 
           (let (kill-buffer-query-functions) (kill-buffer))))

;;;;;;;;;;;------MISC -------------------------------------------------------------------------
(require 'php-mode)
(require 'recentf)
(recentf-mode 1)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

(global-set-key (kbd "C-o") 'ido-switch-buffer) ;


;;  set tab
;(setq-default indent-tabs-mode nil)
;(setq-default tab-width 4)
;(setq indent-line-function 'insert-tab)


;; make cursor movement keys under right hand's home-row.
;(global-set-key (kbd "C-h") 'backward-char) ; was indent-new-comment-line
(global-set-key (kbd "C-h") 'backward-char) ; was indent-new-comment-line
(global-set-key (kbd "C-l") 'forward-char)  ; was downcase-word
(global-set-key (kbd "M-l") 'forward-char)  ; was downcase-word
(global-set-key (kbd "M-k") 'previous-line) ; was tab-to-tab-stop
(global-set-key (kbd "M-j") 'next-line) ; was kill-sentence
(global-set-key (kbd "C-x C-a") 'beginning-of-buffer) ; 
;;(global-set-key (kbd "C-x C-e") 'end-of-buffer) ; 


(global-set-key (kbd "M-SPC") 'set-mark-command) ; was just-one-space
;(global-set-key (kbd "M-a") 'execute-extended-command) ; was backward-sentence
;(global-set-key (kbd "<f5>") 'execute-extended-command)
(global-set-key (kbd "<f6>") 'viper-mode)

(global-set-key [f3] 'occur)


(global-set-key (kbd "\C-xw") 'toggle-truncate-lines)
 


(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(define-key global-map "\C-cc" 'org-remember)
;(define-key global-map "\C-xt" 'artist-mode)
;;Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
;;Move around wndows
(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two

;;; setup tramp
(require 'tramp)
(setq tramp-default-method "ssh")
(setq tramp-auto-save-directory "~/.emacs.d/tramp-autosave")



(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)



;;;;;;;;;;;--------------------------------------------------------------------------------------

(defun todo () 
      (interactive) 
      (find-file "~/org/todo.org") 
 )
(defun note () 
    (interactive) 
      (find-file "~/org/notes.org") 
 )
(defun mingo () 
    (interactive) 
      (find-file "~/org/lisp/mingo.el") 67
 )
(defun gtd () 
    (interactive) 
      (find-file "~/org/gtd.org") 
 )

(defun site () 
    (interactive) 
      (find-file "~/org/sites.org") 
 )

(defun djan () 
    (interactive) 
      (find-file "~/org/djan.org") 
 )


(defun me () 
    (interactive) 
      (find-file "~/org/me.org") 
 )
(defun emacs () 
    (interactive) 
      (find-file "~/.emacs") 
 )
;;------------------------------------------------------------------------------

;; the appointment notification facility
;(setq
;  appt-message-warning-time 15 ;; warn 15 min in advance
;
;  appt-display-mode-line t     ;; show in the modeline
;  appt-display-format 'window) ;; use our func
;(appt-activate 1)              ;; active appt (appointment notification)
;(display-time)                 ;; time display is required for this...
;
; ;; update appt each time agenda opened
;
;(add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
;
;;; our little façade-function for djcb-popup
; (defun djcb-appt-display (min-to-app new-time msg)
;    (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg 
;      "/usr/share/icons/gnome/32x32/status/appointment-soon.png"
;
;      "/usr/share/sounds/ubuntu/stereo/phone-incoming-call.ogg"))
;  (setq appt-disp-window-function (function djcb-appt-display))
;
;;;--------------------------------------------------------------------

(global-set-key (kbd "C-x j") 'just-one-space) ;  just-one-space

(setq 
  bookmark-default-file "~/.emacs.d/bookmarks" ;; keep my ~/ clean
  bookmark-save-flag 0)                        ;; autosave each change)


(require 'misc)
(define-key global-map (kbd "M-f") 'forward-to-word)
(define-key global-map (kbd "M-b") 'backward-to-word)

;;------------------eval buffer of ruby, python .... -----

(load "~/.emacs.d/eval-buffer.el")

(global-set-key (kbd "<f9>") 'jw-eval-buffer)
;-------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/vendor/find-temp-file")
(require 'find-temp-file)					;

(setq find-temp-file-directory "~/drafts")
;(setq find-temp-template-default "%D/%N-%U.%E")
			;(setq find-temp-template-default "%D/%N-%S.%E")
(setq find-temp-template-default "%N-%S.%E")
;(setq find-temp-template-default "%N-%U.%E")
					;(setq find-temp-template-default "%N.%E")
;(setq find-temp-template-default "%M/%D/%N-%U.%E")
(define-key global-map (kbd "C-x C-t") 'find-temp-file)


;;-----------------------

(add-hook 'dired-mode-hook 'dired-hide-details-mode)   ; auto hide detail in dired mode
    
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(buffer-face-mode-face '(:background "light gray"))
 '(epg-gpg-program "/usr/bin/gpg2")
 '(package-selected-packages '(treemacs org-alert epc)))

    (add-hook 'dired-mode-hook 'buffer-face-mode) 


;;
;; open org-agenda at startup
(setq inhibit-splash-screen t)
(org-agenda nil "n")
(delete-other-windows)

;; open org-agenda on timer  http://jmdeldin.com/posts/2015/emacs-cron/
(defun open-org-agenda ()
  "show the org agenda"
;  (interactive)
  (org-agenda nil "n")
  )

;; assign your timer to a variable. this is important -- without this,
;; you will be unable to easily cancel your timer
;(setq my-timer (run-with-idle-timer 3600 t 'open-org-agenda))
;(setq my-timer (run-with-timer 0 3600 'open-org-agenda))

;; 4 hours (14,400 seconds) too soon? cancel it:
; (cancel-timer my-timer)

;(global-set-key [f10] 'org-agenda)

(setq org-src-fontify-natively t)

;;
 (require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-hook 'yaml-mode-hook
      '(lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Courier New" :foundry "outline" :slant normal :weight normal :height 120 :width normal)))))
;; helm and helm-org-rifile
;; If async is installed
(add-to-list 'load-path "~/.emacs.d/vendor/emacs-async")

(add-to-list 'load-path "~/.emacs.d/vendor/helm")
(require 'helm-config)

(add-to-list 'load-path "~/.emacs.d/vendor/dash.el")
(add-to-list 'load-path "~/.emacs.d/vendor/f.el")
(add-to-list 'load-path "~/.emacs.d/vendor/s.el")
(add-to-list 'load-path "~/.emacs.d/vendor/helm-org-rifle")

(require 'helm-org-rifle)
(global-set-key [f10] 'helm-org-rifle-org-directory)
(global-set-key (kbd "<C-f10>") 'helm-org-rifle)
;; helm and helm-org-rifile end

;; Start eshell or switch to it if it's active.
(global-set-key (kbd "C-x m") 'eshell)

;;window move
(windmove-default-keybindings)

;(global-set-key (kbd "C-x left") 'window-left)

(global-set-key  (kbd "C-x <left>")  'windmove-left)          ; move to left window
(global-set-key  (kbd "C-x <right>") 'windmove-right)        ; move to right window
(global-set-key (kbd "C-x <up>")    'windmove-up)              ; move to upper window
(global-set-key (kbd "C-x <down>")  'windmove-down)          ; move to lower window


;; server start
(require 'server)
 (and (>= emacs-major-version 23)
     (defun server-ensure-safe-dir (dir) "Noop" t))

(server-start)

(setq vc-handled-backends nil)

;;-----------------------------------------------------------------
;; auto save 
 (require 'real-auto-save)
(add-hook 'prog-mode-hook 'real-auto-save-mode)
(add-hook 'text-mode 'real-auto-save-mode)
(add-hook 'org-mode 'real-auto-save-mode)

 (setq real-auto-save-interval 120) ;; in seconds

; GnuPG 
(require 'epa-file)

(epa-file-enable)

;(setq epa-file-cache-passphrase-for-symmetric-encryption t)

; setup ccrypt for encryption
;(setq load-path (cons "path" load-path))
(require 'ps-ccrypt "ps-ccrypt.el")

;(require 'google-translate)
;(require 'google-translate-smooth-ui)
;(global-set-key "\C-ct" 'google-translate-smooth-translate)
;(setq google-translate-translation-directions-alist '(("de" . "en")))
;


(require 'google-translate)
(require 'google-translate-default-ui)
(global-set-key "\C-t" 'google-translate-at-point)
(global-set-key "\C-cT" 'google-translate-query-translate)


(require 'google-translate-mode)
;(custom-set-variables '(google-translate-mode-idle-wait-time 0.4))

(setq google-translate-default-source-language "German")
(setq google-translate-default-target-language "English")


